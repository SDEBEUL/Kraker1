MODULE L_support(SYSMODULE)
 
 !Data types declaratie.
 
 !omschrijft de verschillende mogelijk stukken in het systeem.
 !deze waarden zijn vast en een soort ID voor een bepaalde stuk. 
  RECORD PartType
     num Geen;
     num OnbewerkteBalk;
     num OnbewerkteOnderrand;
     num OnbewerkteBovenrrand;
     num Balk330;
     num Balk331;
     num Balk332;
     num OnderrandLinks;
     num OnderrandRechts;
     num BovenrandLinks;
     num BovenrandRechts;
     num Inbewerking;
  Endrecord
  
  RECORD StationType
   bool InDienst; !station in dienst 
   num  Lading; !wat voor een stuk er monteel in het station ligt. (parttype)
   num  Bewerkingsstap; !nog niet gebruikt ... voor auto repair toepassing
   num  Opdracht; !wat voor een stuk er in het station gemaakt moet worden (parttype)
   num  xOffset; !offset tov midden
   num  pOffset; !offset langs positieve kant 
   num  nOffset; !offset langs negatieve kant 
  ENDRECORD
    
  RECORD UitvoerBufferType 
    bool InDienst; !staat in dienst 
    bool Vol; ! is vol  (max stukken of aantalgewenste stukken bereikt)
    bool Leeg;! is leeg 
    bool Veilig;! is veilig = gescand door robot of actieve laag en stuk klopt. (reset door safety)
    num ActieveLaag;!actieve laag in het rek
    num ActiefStuk; !actief stuk in de actieve laag 
    PartType AantalPartsAanwezig;!lijst van aantal stukken per type dat in het rek zitten 
    PartType AantalPartsGewenst; !lijst van aantal stukken per type dat het rek wenst 
  ENDRECORD 
  
  RECORD InvoerBufferType 
    bool InDienst; !staat in dienst 
    bool Vol; ! is vol  (max stukken of aantalgewenste stukken bereikt)
    bool Leeg;! is leeg 
    bool Veilig;! is veilig = gescand door robot of actieve laag en stuk klopt. (reset door safety)
    num ActieveLaag;!actieve laag in het rek
    num ActiefStuk; !actief stuk in de actieve laag 
  ENDRECORD 
  
  RECORD ProcuctionType
      bool Dwarsbalken;
      bool Onderanden;
      bool Bovenranden;
  ENDRECORD 
  
  RECORD SpindeltoolType 
      string toolnaam;
      num Toerental;
      speeddata VoedingBoren;
      speeddata VoedingFrezen;
      speeddata VoedingAanzetBoren;
      speeddata VoedingAanzetFrezen;
      num nGatengeboord;
      num nMetergefreest;
      string sLaatsgewisseld;
      num nMaxaantalgaten;
      num nMaxMeterfrezen;
  ENDRECORD 
    
 !gedeelde record over de verschillende taken.
 !pas hier nooit iets handmatig aan maar gebruik altijd de interface! 
  CONST PartType part := [0,1,2,3,4,5,6,7,8,9,10,11];
  !station 1-5 zijn de automatische station 6 is het manuele station gebruikt voor onderranden en bovenranden
  PERS StationType Station{6} := 
  [
  [TRUE,11,0,5,-0.552185,-0.0651245,-1.03925],
  [TRUE,1,0,5,1.88004,2.29486,1.46521],
  [TRUE,1,0,5,3.1637,2.35785,3.96954],
  [FALSE,0,0,0,-0.629639,0,0],
  [FALSE,1,2.64965E-31,3.92364E-44,1.4013E-45,1.05938E-42,1.05938E-42],
  [TRUE,1.4013E-45,2.64554E-31,1.4013E-45,8.40779E-45,2.66006E-31,2.8026E-45]
  ];
  PERS UitvoerBufferType UitvoerBuffer{6} :=
  [
  [FALSE,FALSE,FALSE,FALSE,5,8,[0,0,0,0,0,7,0,0,0,0,0,0],[0,0,0,0,0,8,0,0,0,0,0,0]],
  [FALSE,FALSE,FALSE,FALSE,4,7,[0,0,0,0,0,2,0,0,0,0,0,0],[0,0,0,0,0,4,0,0,0,0,0,0]],
  [FALSE,FALSE,FALSE,FALSE,0,0,[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]],
  [FALSE,FALSE,FALSE,FALSE,0,0,[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]],
  [FALSE,FALSE,FALSE,FALSE,0,0,[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]],
  [FALSE,FALSE,FALSE,FALSE,0,0,[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]]
  ];
  PERS InvoerBufferType InvoerBuffer{6} :=
  [
  [FALSE,TRUE,TRUE,FALSE,1,1],
  [FALSE,TRUE,FALSE,TRUE,4,7],
  [FALSE,FALSE,FALSE,FALSE,0,0],
  [FALSE,FALSE,FALSE,FALSE,0,0],
  [FALSE,FALSE,FALSE,FALSE,0,0],
  [FALSE,FALSE,FALSE,FALSE,0,0]
  ];
  PERS ProcuctionType Production := [FALSE,TRUE,FALSE];
  PERS SpindeltoolType Spindeltool{6} := 
  [
  ["Boor 11",2750,[2.5,500,5000,1000],[10,500,5000,1000],[100,500,5000,1000],[0.1,500,5000,1000],0,0,"",1000,1000],
  ["Frees 11",3500,[4,500,5000,1000],[1,500,5000,1000],[10,500,5000,1000],[10,500,5000,1000],0,0,"",1000,1000],
  ["Leeg",1800,[0.1,500,5000,1000],[0.1,500,5000,1000],[0.1,500,5000,1000],[0.1,500,5000,1000],0,0,"",1000,1000],
  ["Leeg",1800,[0.1,500,5000,1000],[0.1,500,5000,1000],[0.1,500,5000,1000],[0.1,500,5000,1000],0,0,"",1000,1000],
  ["Leeg",1800,[0.1,500,5000,1000],[0.1,500,5000,1000],[0.1,500,5000,1000],[0.1,500,5000,1000],0,0,"",1000,1000],
  ["Leeg",1800,[0.1,500,5000,1000],[0.1,500,5000,1000],[0.1,500,5000,1000],[0.1,500,5000,1000],0,0,"",1000,1000]
  ];
   
  
  !******************************************************************************
  
  CONST jointtarget Sync_Position:=[[0,0,0,0,0,0],[0,9E+009,9E+009,9E+009,9E+009,9E+009]];
  TASK PERS wobjdata wobj_Active:=[FALSE,TRUE,"",[[1927.94,-1043.5,510.5],[0.707107,0.707107,0,0]],[[-1202.5,27.5,0],[1,0,0,0]]];
  PERS tooldata TempTool:=[TRUE,[[0,0,0],[1,0,0,0]],[0.001,[0,0,0.001],[1,0,0,0],0,0,0]];
  PERS wobjdata TempWobj:=[FALSE,TRUE,"",[[0,0,0],[1,0,0,0]],[[0,0,0],[1,0,0,0]]];
  !interupts
  VAR intnum Int1SprvSpindel := 1;
  VAR intnum Int2SprvPart := 2;
  VAR intnum Int3Sprvlichtbeam := 3;
  !loffile
  PERS string file1LoggErrW:="Logg.log";
  PERS string file2LoggErrW:="Logg_old.log";
  LOCAL PERS num maxLogCounErrDisp:=1000;
  LOCAL PERS num logCounterErrDisp:=891;
  LOCAL VAR iodev file;
   
  PROC SyncPos()
    !***************************************	    
    ! Proc: SyncPos
    ! Description: move to syncpos
    !***************************************
    MoveAbsJ Sync_Position, v4000, z50, tool0\WObj:=wobj0;
  ENDPROC
  
  PROC ManHomePosCheck()
    !***************************************	    
    ! Proc: HomePosCheck
    ! Description: ter controle verschillende homeposities
    !***************************************
    !with track 
    MoveAbsJ pHomeJoint_Grijper\NoEOffs,v4000,z50,tool0; 
    Stop;
    MoveAbsJ pHomeJoint_Dummy\NoEOffs,v4000,z50,tool0; 
    Stop;
    MoveAbsJ pHomeJoint_spindel\NoEOffs,v4000,z50,tool0; 
    Stop;
    MoveAbsJ pHomeJoint_StationXboor11\NoEOffs,v4000,z50,tool0; 
    Stop;
    !armonly
    MoveAbsJ fArm_only(pHomeJoint_Grijper)\NoEOffs,v4000,z50,tool0; 
    Stop;
    MoveAbsJ fArm_only(pHomeJoint_Dummy)\NoEOffs,v4000,z50,tool0; 
    Stop;
    MoveAbsJ fArm_only(pHomeJoint_spindel)\NoEOffs,v4000,z50,tool0; 
    Stop;
    MoveAbsJ fArm_only(pHomeJoint_StationXboor11)\NoEOffs,v4000,z50,tool0; 
    Stop;
  ENDPROC
  
  Func jointtarget fArm_only(jointtarget target)
    !***************************************	    
    ! Func: fArm_only
    ! Description: move to home jointtarget
    ! arm only
    !***************************************
    VAR jointtarget ArmHome; 
    VAR robtarget pAct;
    ArmHome := target;
    pAct := CRobT();
    ArmHome.extax.eax_a := pAct.extax.eax_a;
    RETURN ArmHome;
    !
 ENDFUNC
 
 PROC go_home(\switch Armonly ,\switch Armfirst )
    !***************************************	    
    ! Proc: go_home
    ! Description: go home with active tool
    ! Armonly sets the home pos without track
    ! Armfirst moves the arm home before the track
    !***************************************
    VAR jointtarget tempJnt;
    EOffsSet [0,0,0,0,0,0];
    IF nActive_Gripper = GrijperTool THEN
      Check_gripper(GrijperTool);
      tempJnt := pHomeJoint_Grijper;
    ELSE
      tempJnt := pHomeJoint_spindel;
    ENDIF
      
    IF Present(Armonly) THEN
      MoveAbsJ fArm_only(tempJnt)\NoEOffs,v4000,fine,tool0;   
      RETURN;
    ENDIF
    
    IF Present(Armfirst) THEN
      MoveAbsJ fArm_only(tempJnt)\NoEOffs,v4000,fine,tool0;  
      MoveAbsJ tempJnt\NoEOffs,v4000,fine,tool0;  
      RETURN;
    ENDIF
    
    MoveAbsJ tempJnt\NoEOffs,v4000,fine,tool0; 
    !
    ENDPROC
    
    PROC check_home( \switch Armonly)
    !***************************************	    
    ! Proc: check_home
    ! Description: check if robot is home
    ! Armonly sets the home pos without track
    !***************************************
    VAR jointtarget tempJnt;
    IF nActive_Gripper = GrijperTool THEN
      Check_gripper(GrijperTool);
      tempJnt := pHomeJoint_Grijper;
    ELSE
      tempJnt := pHomeJoint_spindel;
    ENDIF
    !
    CheckE6Ax tempJnt\Armonly?ArmOnly; 
    !
    ENDPROC
    
   FUNC num nXdistanceBetweenWobj(wobjdata Wobj1, wobjdata Wobj2)
    !***************************************	    
    ! FUNC: nXdistanceBetweenWobj
    ! Description: x afstand tussen 2 wobj
    ! gebruikt voor trackshift tussen de dwarsbalk stations
    !***************************************
       VAR num Xdistance;
       Xdistance :=  Wobj2.uframe.trans.x - Wobj1.uframe.trans.x ;
       Return Xdistance;
   ENDFUNC
    
  PROC CheckInput(
    VAR signaldi signal,
    dionum value
    \switch Skip
    \num CheckTimeOut,
    \num AlarmTimeOut,
    string text_msg)
    VAR num key_in;
    VAR num maxWaitTime:=0.1;
    VAR bool repeat:=TRUE;
    VAR clock wait_clock;    
    VAR bool timeout;
    VAR errnum errvar;
    VAR bool ResetAlarm;
    VAR bool exequtedOnce:=TRUE;
    !***************************************
    ! Routine: CheckInput(
    ! VAR signaldi signal,
    ! dionum value
    ! \switch Skip
    ! \num CheckTimeOut,
    ! string text_msg)
    ! Description: Check specified input FOR
    ! specified status
    !***************************************
    ResetAlarm:=FALSE;
    exequtedOnce:=TRUE;
    WaitDI signal,value\MaxTime:=0.1\TimeFlag:=timeout;
    WHILE signal<>value DO
      TPErase;
      TPWrite text_msg;
      WaitTime 0.1;
      IF Present(CheckTimeOut) THEN
      	clkreset wait_clock;
        repeat:=TRUE;
        IF signal<>value THEN	
          WHILE signal<>value AND repeat DO
            clkstart wait_clock;	
            IF ClkRead(wait_clock)>CheckTimeOut repeat:=FALSE;
            WaitTime 0.01;
          ENDWHILE
          clkStop wait_clock;
          clkreset wait_clock;
        ENDIF  
        IF Present(Skip) THEN
          TPErase;
          IF signal<>value THEN
            TPReadFK key_in,text_msg,"","","","SKIP","RETRY"\BreakFlag:=errvar;
          ENDIF
          TPErase;
          TEST key_in
          CASE 4:
            RETURN;
          CASE 5:   
            ResetAlarm:=TRUE;
          ENDTEST
        ELSE
          TPErase;
          IF signal<>value THEN
            ErrWrite\W,"CheckInput:",text_msg;
            TPReadFK key_in,text_msg,"","","","","RETRY"\BreakFlag:=errvar;
            ResetAlarm:=TRUE;
          ENDIF  
        ENDIF
      ENDIF
      IF (OpMode()<>OP_AUTO OR (Present(Skip) AND (NOT Present(CheckTimeOut)))) AND signal<>value THEN
        TPErase;
        ErrWrite\W,"CheckInput:",text_msg;
        TPErase;
        TPReadFK key_in,text_msg,"","","","SKIP","RETRY"\BreakFlag:=errvar;
        TPErase;
        TEST key_in
          CASE 4:
            RETURN;
          CASE 5:   
            ResetAlarm:=TRUE;
        ENDTEST
      ENDIF
      IF (NOT Present(CheckTimeOut)) THEN
        IF Present(AlarmTimeOut) THEN
          repeat:=TRUE;
          IF signal<>value THEN
            clkreset wait_clock;
            WHILE signal<>value AND repeat DO
              clkstart wait_clock;	
              IF ClkRead(wait_clock)>AlarmTimeOut repeat:=FALSE;
              WaitTime 0.01;
            ENDWHILE
            clkStop wait_clock;
            clkreset wait_clock;
          ENDIF  
        ELSE
          repeat:=TRUE;
          IF signal<>value THEN
            clkreset wait_clock;	
            WHILE signal<>value AND repeat DO
              clkstart wait_clock;	
              IF ClkRead(wait_clock)>maxWaitTime repeat:=FALSE;
              WaitTime 0.01;
            ENDWHILE
            clkStop wait_clock;
            clkreset wait_clock;
          ENDIF          	
        ENDIF
        IF (NOT repeat)  THEN
          ErrWrite\W,"CheckInput:",text_msg;
          ResetAlarm:=TRUE;
          exequtedOnce:=FALSE;
        ENDIF
      ENDIF
    ENDWHILE
    TPErase;
  ERROR
    IF ERRNO=ERR_REFUNKPRC THEN
      TRYNEXT;
    ENDIF
  ENDPROC
  
 
    
  PROC CheckGroupbit(
    VAR signalgi signal,
    VAR num bit,
    bool value
    \switch Skip
    \num CheckTimeOut,
    \num AlarmTimeOut,
    string text_msg)
    VAR num key_in;
    VAR num maxWaitTime:=0.1;
    VAR bool repeat:=TRUE;
    VAR clock wait_clock;    
    VAR bool timeout;
    VAR errnum errvar;
    VAR bool ResetAlarm;
    VAR bool exequtedOnce:=TRUE;
    !***************************************
    ! Routine: CheckGroupbit(
    ! Description: Check specified bit of Groupinput FOR
    ! specified status
    !***************************************
    ResetAlarm:=FALSE;
    exequtedOnce:=TRUE;
    WaitUntil BitCheckDnum(GInputDnum (signal),bit) = value \MaxTime := 3 \TimeFlag := timeout \PollRate:= 0.5;
    WHILE BitCheckDnum(GInputDnum (signal),bit)<>value DO
      TPErase;
      TPWrite text_msg;
      WaitTime 0.1;
      IF Present(CheckTimeOut) THEN
      	clkreset wait_clock;
        repeat:=TRUE;
        IF  BitCheckDnum(GInputDnum (signal),bit)<>value THEN	
          WHILE BitCheckDnum(GInputDnum (signal),bit)<>value AND repeat DO
            clkstart wait_clock;	
            IF ClkRead(wait_clock)>CheckTimeOut repeat:=FALSE;
            WaitTime 0.01;
          ENDWHILE
          clkStop wait_clock;
          clkreset wait_clock;
        ENDIF  
        IF Present(Skip) THEN
          TPErase;
          IF  BitCheckDnum(GInputDnum (signal),bit)<>value THEN
            TPReadFK key_in,text_msg,"","","","SKIP","RETRY"\BreakFlag:=errvar;
          ENDIF
          TPErase;
          TEST key_in
          CASE 4:
            RETURN;
          CASE 5:   
            ResetAlarm:=TRUE;
          ENDTEST
        ELSE
          TPErase;
          IF  BitCheckDnum(GInputDnum (signal),bit)<>value THEN
            ErrWrite\W,"CheckGroupbit:",text_msg;
            TPReadFK key_in,text_msg,"","","","","RETRY"\BreakFlag:=errvar;
            ResetAlarm:=TRUE;
          ENDIF  
        ENDIF
      ENDIF
      IF (OpMode()<>OP_AUTO OR (Present(Skip) AND (NOT Present(CheckTimeOut)))) AND  BitCheckDnum(GInputDnum (signal),bit)<>value THEN
        TPErase;
        ErrWrite\W,"CheckGroupbit:",text_msg;
        TPErase;
        TPReadFK key_in,text_msg,"","","","SKIP","RETRY"\BreakFlag:=errvar;
        TPErase;
        TEST key_in
          CASE 4:
            RETURN;
          CASE 5:   
            ResetAlarm:=TRUE;
        ENDTEST
      ENDIF
      IF (NOT Present(CheckTimeOut)) THEN
        IF Present(AlarmTimeOut) THEN
          repeat:=TRUE;
          IF  BitCheckDnum(GInputDnum (signal),bit)<>value THEN
            clkreset wait_clock;
            WHILE  BitCheckDnum(GInputDnum (signal),bit)<>value AND repeat DO
              clkstart wait_clock;	
              IF ClkRead(wait_clock)>AlarmTimeOut repeat:=FALSE;
              WaitTime 0.01;
            ENDWHILE
            clkStop wait_clock;
            clkreset wait_clock;
          ENDIF  
        ELSE
          repeat:=TRUE;
          IF BitCheckDnum(GInputDnum (signal),bit)<>value THEN
            clkreset wait_clock;	
            WHILE  BitCheckDnum(GInputDnum (signal),bit)<>value AND repeat DO
              clkstart wait_clock;	
              IF ClkRead(wait_clock)>maxWaitTime repeat:=FALSE;
              WaitTime 0.01;
            ENDWHILE
            clkStop wait_clock;
            clkreset wait_clock;
          ENDIF          	
        ENDIF
        IF (NOT repeat)  THEN
          ErrWrite\W,"CheckGroupbit:",text_msg;
          ResetAlarm:=TRUE;
          exequtedOnce:=FALSE;
        ENDIF
      ENDIF
    ENDWHILE
    TPErase;
  ERROR
    IF ERRNO=ERR_REFUNKPRC THEN
      TRYNEXT;
    ENDIF
  ENDPROC
  
  
  
  
 PROC CheckE6Ax(
    jointtarget ExpectJoint
    \switch ArmOnly)
    !***************************************
    ! Routine: CheckE6Ax(
    ! jointtarget ExpectJoint)
    ! Description: Check if the 6 axes is
    ! in expected angle
    !***************************************
    CONST num MaxJointDiff:=2;
    VAR jointtarget CurrentJoint;
    VAR num nNum;
    VAR bool NoMoreLoop;
    WHILE NoMoreLoop=FALSE DO
      CurrentJoint:=CJointT();
      IF AxisDiff(CurrentJoint,ExpectJoint\ArmOnly?ArmOnly)<MaxJointDiff NoMoreLoop:=TRUE;
      IF AxisDiff(CurrentJoint,ExpectJoint\ArmOnly?ArmOnly)>MaxJointDiff THEN
        TPErase;
        TPReadFK nNum,"ROBOT NOT IN HOME! Start beweging to home?","","","","YES","NO";
        TPErase;
        TEST nNum
        CASE 4:
          TPErase;
          TPWrite "Robot gaat bewegen!";
          WaitTime 1;
          TempTool:=CTool();
          TempWobj:=CWObj();
          IF Present(ArmOnly) THEN
            MoveAbsJ fArm_only(ExpectJoint),v200,fine,TempTool\WObj:=TempWobj;
          ELSE
            MoveAbsJ ExpectJoint,v200,fine,TempTool\WObj:=TempWobj; 
          ENDIF

          TPErase;
        CASE 5:
          TPErase;
          ! Dangerous motion. Get maintenance
          TPReadFK nNum,"Robot zal niet van thuis starten! Dit is gevaarlijk!","","","","","PROCEED";
          Stop;
          NoMoreLoop:=FALSE;
        DEFAULT:
          ! You have to choose  'Yes' or 'No'
          TPWrite "Kies ja of nee";
          WaitTime 1;
          NoMoreLoop:=FALSE;
        ENDTEST
      ENDIF
    ENDWHILE
  ENDPROC

  LOCAL FUNC num AxisDiff(
    jointtarget robj1,
    jointtarget robj2
    \switch ArmOnly)

    !***************************************
    ! Function: num AxisDiff(
    ! jointtarget robj1,
    ! jointtarget robj2)
    ! Description: Calculate and return the
    ! difference between current and
    ! expected axes angels
    !***************************************
    VAR num maxdiff;
    VAR num temp;

    maxdiff:=Abs(robj1.robax.rax_1-robj2.robax.rax_1);
    temp:=Abs(robj1.robax.rax_2-robj2.robax.rax_2);
    IF temp>maxdiff THEN
      maxdiff:=temp;
    ENDIF
    temp:=Abs(robj1.robax.rax_2-robj2.robax.rax_2);
    IF temp>maxdiff THEN
      maxdiff:=temp;
    ENDIF
    temp:=Abs(robj1.robax.rax_3-robj2.robax.rax_3);
    IF temp>maxdiff THEN
      maxdiff:=temp;
    ENDIF
    temp:=Abs(robj1.robax.rax_4-robj2.robax.rax_4);
    IF temp>maxdiff THEN
      maxdiff:=temp;
    ENDIF
    temp:=Abs(robj1.robax.rax_5-robj2.robax.rax_5);
    IF temp>maxdiff THEN
      maxdiff:=temp;
    ENDIF
    temp:=Abs(robj1.robax.rax_6-robj2.robax.rax_6);
    IF temp>maxdiff THEN
      maxdiff:=temp;
    ENDIF
    IF NOT Present(ArmOnly) THEN
        temp:=Abs(robj1.extax.eax_a-robj2.extax.eax_a);
        IF temp>maxdiff THEN
          maxdiff:=temp;
        ENDIF
        temp:=Abs(robj1.extax.eax_b-robj2.extax.eax_b);
        IF temp>maxdiff THEN
          maxdiff:=temp;
        ENDIF
        temp:=Abs(robj1.extax.eax_c-robj2.extax.eax_c);
        IF temp>maxdiff THEN
          maxdiff:=temp;
        ENDIF
        temp:=Abs(robj1.extax.eax_d-robj2.extax.eax_d);
        IF temp>maxdiff THEN
          maxdiff:=temp;
        ENDIF
        temp:=Abs(robj1.extax.eax_e-robj2.extax.eax_e);
        IF temp>maxdiff THEN
          maxdiff:=temp;
        ENDIF
        temp:=Abs(robj1.extax.eax_f-robj2.extax.eax_f);
        IF temp>maxdiff THEN
          maxdiff:=temp;
        ENDIF
    ENDIF
    RETURN maxdiff;
  ENDFUNC
  
  PROC LoggProc(string text,num ErrCode,string keytext)
    VAR num key_in:=0;
    VAR bool tempBool;
    VAR bool disable:=TRUE;
    !***************************************
    ! PROC: LoggProc
    ! Description: log data into a file 
    !***************************************
    logCounterErrDisp:=logCounterErrDisp+1;
    IF logCounterErrDisp>maxLogCounErrDisp THEN
      IF Isfile(file2LoggErrW) RemoveFile "Home:/"+file2LoggErrW;
      IF Isfile(file1LoggErrW) RenameFile "Home:/"+file1LoggErrW, "Home:/"+file2LoggErrW;
      logCounterErrDisp:=1;
    ENDIF
    Open "HOME:"\File:=file1LoggErrW,file\Append;
    Write file," ";
    Write file,CDate()\NoNewLine;
    Write file,", "+CTime()\NoNewLine;
    Write file,", "+text\NoNewLine;
    Write file," ,Code , "\Num:=ErrCode\NoNewLine;
    Write file," ,Info , "+keytext\NoNewLine;
    Close file;
  ERROR
    IF ERRNO=ERR_FILEOPEN THEN
      ! Fix the RAM disk problem please
    ENDIF
    IF ERRNO=ERR_FILEACC TRYNEXT;
  ENDPROC 
  
ENDMODULE