MODULE L_support(SYSMODULE)
 
 !Data types declaratie.
 
 !omschrijft de verschillende mogelijk stukken in het systeem.
 !deze waarden zijn vast en een soort ID voor een bepaalde stuk. 
  RECORD PartType
     num Geen;
     num OnbewerkteBalk;
     num OnbewerkteOnderrand;
     num OnbewerkteBovenrrand;
     num Balk330;
     num Balk331;
     num Balk332;
     num OnderrandLinks;
     num OnderrandRechts;
     num BovenrandLinks;
     num BovenrandRechts;
     num Inbewerking;
  Endrecord
  
  RECORD StationType
   bool InDienst; !station in dienst 
   num  Lading; !wat voor een stuk er monteel in het station ligt. (parttype)
   num  Bewerkingsstap; !nog niet gebruikt ... voor auto repair toepassing
   num  Opdracht; !wat voor een stuk er in het station gemaakt moet worden (parttype)
   num  xOffset; !nog niet gebruikt ... voor offset functie zoeken met grijper. 
  ENDRECORD
  
  RECORD UitvoerBufferType 
    bool InDienst;
    bool InGebruik;
    bool Vol;
    bool Leeg;
    bool Veilig;
    num ActieveLaag;
    num ActiefStuk;
    PartType AantalPartsAanwezig;
    PartType AantalPartsGewenst;
  ENDRECORD 
  
  RECORD InvoerBufferType 
    bool InDienst;
    bool InGebruik;
    bool Vol;
    bool Leeg;
    bool Veilig;
    num ActieveLaag;
    num ActiefStuk;
  ENDRECORD 
  
  RECORD ProcuctionType
      bool Dwarsbalken;
      bool Onderanden;
      bool Bovenranden;
  ENDRECORD 
    
 !gedeelde record over de verschillende taken.
 !pas hier nooit iets handmatig aan maar gebruik altijd de interface! 
  CONST PartType part := [0,1,2,3,4,5,6,7,8,9,10,11];
  PERS StationType Station{6}; !station 1-5 zijn de automatische station 6 is het manuele station gebruikt voor onderranden en bovenranden
  PERS UitvoerBufferType UitvoerBuffer{6};
  PERS InvoerBufferType InvoerBuffer{6};
  PERS ProcuctionType Production;
  
  
  !******************************************************************************
  
  CONST jointtarget Sync_Position:=[[0,0,0,0,0,0],[0,9E+009,9E+009,9E+009,9E+009,9E+009]];
  TASK PERS wobjdata wobj_Active:=[FALSE,TRUE,"",[[965,1096,1400],[1,0,0,0]],[[0,529,0],[1,0,0,0]]];
  !interupts
  VAR intnum Int1SprvSpindel := 1;
  VAR intnum Int2SprvPart := 2;
  
  PROC dingens()
  ENDPROC 
  
  
  PROC SyncPos()
    !***************************************	    
    ! Proc: SyncPos
    ! Description: move to syncpos
    !***************************************
    MoveAbsJ Sync_Position, v1000, z50, tool0\WObj:=wobj0;
  ENDPROC
  
  PROC HomePosCheck()
    !***************************************	    
    ! Proc: HomePosCheck
    ! Description: ter controle verschillende homeposities
    !***************************************
    !with track 
    MoveAbsJ pHomeJoint_Grijper\NoEOffs,v1000,z50,tool0; 
    Stop;
    MoveAbsJ pHomeJoint_Dummy\NoEOffs,v1000,z50,tool0; 
    Stop;
    MoveAbsJ pHomeJoint_spindel\NoEOffs,v1000,z50,tool0; 
    Stop;
    MoveAbsJ pHomeJoint_StationXboor11\NoEOffs,v1000,z50,tool0; 
    Stop;
    !armonly
    MoveAbsJ fArm_only(pHomeJoint_Grijper)\NoEOffs,v1000,z50,tool0; 
    Stop;
    MoveAbsJ fArm_only(pHomeJoint_Dummy)\NoEOffs,v1000,z50,tool0; 
    Stop;
    MoveAbsJ fArm_only(pHomeJoint_spindel)\NoEOffs,v1000,z50,tool0; 
    Stop;
    MoveAbsJ fArm_only(pHomeJoint_StationXboor11)\NoEOffs,v1000,z50,tool0; 
    Stop;
  ENDPROC
  
  Func jointtarget fArm_only
         (
         jointtarget target
         )
    !***************************************	    
    ! Func: fArm_only
    ! Description: move to home jointtarget
    ! arm only
    !***************************************
    VAR jointtarget ArmHome; 
    VAR robtarget pAct;
    ArmHome := target;
    pAct := CRobT();
    ArmHome.extax.eax_a := pAct.extax.eax_a;
    RETURN ArmHome;
    !
 ENDFUNC
 
 PROC go_home
     (
     \switch Armonly ,
     \switch Armfirst 
     )
    !***************************************	    
    ! Proc: go_home
    ! Description: go home with active tool
    ! Armonly sets the home pos without track
    ! Armfirst moves the arm home before the track
    !***************************************
    VAR jointtarget tempJnt;
    IF nActive_Gripper = GrijperTool THEN
      Check_gripper(GrijperTool);
      tempJnt := pHomeJoint_Grijper;
    ELSE
      tempJnt := pHomeJoint_spindel;
    ENDIF
      
    IF Present(Armonly) THEN
      MoveAbsJ fArm_only(tempJnt)\NoEOffs,v1000,z50,tool0;   
      RETURN;
    ENDIF
    
    IF Present(Armfirst) THEN
      MoveAbsJ fArm_only(tempJnt)\NoEOffs,v1000,z50,tool0;  
      MoveAbsJ tempJnt\NoEOffs,v1000,z50,tool0;  
      RETURN;
    ENDIF
    
    MoveAbsJ tempJnt\NoEOffs,v1000,z50,tool0; 
    !
    ENDPROC
    
   FUNC num nXdistanceBetweenWobj(wobjdata Wobj1, wobjdata Wobj2)
    !***************************************	    
    ! FUNC: nXdistanceBetweenWobj
    ! Description: x afstand tussen 2 wobj
    ! gebruikt voor trackshift tussen de dwarsbalk stations
    !***************************************
       VAR num Xdistance;
       Xdistance :=  Wobj2.uframe.trans.x - Wobj1.uframe.trans.x ;
       Return Xdistance;
   ENDFUNC

ENDMODULE